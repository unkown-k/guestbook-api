plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'com.gradle.build-scan'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

group = pro_group
version = pro_version
mainClassName = pro_mainClassName
sourceCompatibility = ver_jdk
targetCompatibility = ver_jdk

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${ver_mybatisBoot}"
    // log4j2
    compile "org.springframework.boot:spring-boot-starter-log4j2"
    compile "com.lmax:disruptor:${ver_disruptor}"
    compile 'mysql:mysql-connector-java'
    compile("com.alibaba:fastjson:${ver_fastjson}")
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        // exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

//指定项目编码
tasks.withType(JavaCompile) {
    options.encoding = pro_encoding
}

//源代码目录下面所有的*.xml复制到jar包中
jar {
    from('src/main/java') {
        include '**/*.xml'
    }
}

//指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            include '**'
        }
        resources {
            // src/main/java 可以将java目录下的所有非.java资源打包到classes下
            srcDirs = ['src/main/java', 'src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ["src/test/java", "src/test/api"]
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

//IDEA配置
idea.module {
    ["logs", "sql", "required", "gradle"].each {
        excludeDirs += file("$it")
    }
}